name: Databricks CI Pipeline

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
    types: [opened, synchronize]

jobs:
  code-quality-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Copy configuration files
        run: |
          echo "Copying configuration files from .github/configs/ to project root..."
          cp .github/configs/.flake8 .flake8
          cp .github/configs/.bandit.yml .bandit.yml
          cp .github/configs/pyproject.toml pyproject.toml || true
          cp .github/configs/mypy.ini mypy.ini || true
          cp .github/configs/radon.toml radon.toml || true
          echo "‚úì Config files ready"
          
      - name: Install dependencies
        run: |
          pip install flake8 pytest black mypy bandit radon pip-audit pyspark-stubs
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
      - name: Run Code Quality Checks
        run: |
          echo "=== Running Code Quality Checks ==="

          OVERALL_EXIT_CODE=0
          PASSED_CHECKS=()
          FAILED_CHECKS=()

          run_check () {
            NAME=$1
            CMD=$2
            if eval "$CMD"; then
              echo "‚úì $NAME: PASSED"
              PASSED_CHECKS+=("$NAME")
            else
              echo "‚úó $NAME: FAILED"
              FAILED_CHECKS+=("$NAME")
              OVERALL_EXIT_CODE=1
            fi
          }

          # Detect Python files in notebooks
          if [ -d "notebooks" ] && [ "$(find notebooks -name '*.py' | wc -l)" -gt 0 ]; then
            PYFILES="notebooks/"
          else
            echo "‚Ñπ No Python files found in notebooks/ - skipping file-based checks"
            PYFILES=""
          fi

          # Run Flake8
          [ -n "$PYFILES" ] && run_check "Flake8 Linting" "flake8 $PYFILES" || PASSED_CHECKS+=("Flake8 (Skipped)")

          # Run Black
          [ -n "$PYFILES" ] && run_check "Black Formatting" "black --check --diff $PYFILES" || PASSED_CHECKS+=("Black (Skipped)")

          # Run Mypy: strict on utils/, lenient on notebooks/
          if [ -d "utils" ]; then
            run_check "Mypy Type Checking (utils)" "mypy utils/"
          fi
          if [ -n "$PYFILES" ]; then
            run_check "Mypy Type Checking (notebooks)" "mypy --ignore-missing-imports $PYFILES"
          else
            PASSED_CHECKS+=("Mypy (Skipped)")
          fi

          # Run Bandit
          [ -n "$PYFILES" ] && run_check "Bandit Security Scan" "bandit -r $PYFILES -c .bandit.yml" || PASSED_CHECKS+=("Bandit (Skipped)")

          # Run Radon Cyclomatic Complexity
          [ -n "$PYFILES" ] && run_check "Radon Complexity" "radon cc $PYFILES -a -nc" || PASSED_CHECKS+=("Radon (Skipped)")

          # Run Pytest if tests/ exists
          if [ -d "tests" ]; then
            run_check "Pytest Unit Tests" "pytest --maxfail=3 --disable-warnings -q"
          else
            echo "‚Ñπ No tests/ directory found - skipping Pytest"
            PASSED_CHECKS+=("Pytest (Skipped)")
          fi

          # Run Dependency Security Audit
          run_check "Dependency Audit" "pip-audit"

          echo ""
          echo "======================================"
          echo "         QUALITY CHECKS SUMMARY       "
          echo "======================================"

          if [ ${#PASSED_CHECKS[@]} -gt 0 ]; then
            echo "‚úÖ PASSED CHECKS (${#PASSED_CHECKS[@]}):"
            for check in "${PASSED_CHECKS[@]}"; do
              echo "   ‚úì $check"
            done
          fi

          if [ ${#FAILED_CHECKS[@]} -gt 0 ]; then
            echo ""
            echo "‚ùå FAILED CHECKS (${#FAILED_CHECKS[@]}):"
            for check in "${FAILED_CHECKS[@]}"; do
              echo "   ‚úó $check"
            done
          fi

          echo ""
          echo "======================================"

          if [ $OVERALL_EXIT_CODE -eq 0 ]; then
            echo "üéâ ALL QUALITY CHECKS PASSED!"
            exit 0
          else
            echo "‚ùå SOME QUALITY CHECKS FAILED!"
            exit 1
          fi
